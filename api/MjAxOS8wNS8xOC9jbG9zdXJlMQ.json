{"title":"Closure in Swift 5 - Part 1 (語法與化簡)","date":"2019-05-18T11:48:07.000Z","link":"2019/05/18/closure1","tags":["swift"],"updated":"2019-08-01T04:25:24.258Z","content":"<h3 id=\"Hello-閉包\"><del>Hello, 閉包 !</del><a href=\"2019/05/18/closure1#Hello-閉包\"></a></h3><h2 id=\"Hello-Closure-😎\">Hello, Closure 😎!<a href=\"2019/05/18/closure1#Hello-Closure-😎\"></a></h2><blockquote>\n<p>Closures are self-contained blocks of functionality that can be passed around and used in your code. - Swift Programming Guide</p>\n</blockquote>\n<br>\n\n<p>Closure 簡單來說就是匿名的 function, 自包含的功能區塊可當參數被傳遞<br>也可以指定到一個變數, 像 function 一樣被呼叫<br>看起來好像跟 function 差不多, 不過 closure 有許多特色<br>其中一個就是讓寫法看起來更簡潔</p>\n<p>另外官方文檔有提到 global functions 和 nested functions 也是 closure 的<br>一種, 算是一種特例</p>\n<br>\n\n<h1 id=\"Function-跟-Closure-語法上的差別\">Function 跟 Closure 語法上的差別<a href=\"2019/05/18/closure1#Function-跟-Closure-語法上的差別\"></a></h1><h2 id=\"Function-語法\"><mark> Function 語法 </mark><a href=\"2019/05/18/closure1#Function-語法\"></a></h2><p><img src=\"/2019/05/18/closure1/function.png\" alt class=\"article-img\"></p>\n<figure class=\"highlight swift\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">sum</span><span class=\"params\">(num1: Int, num2: Int)</span></span> -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> sum = num1 + num2</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<h2 id=\"Closure-語法\"><mark>Closure 語法</mark><a href=\"2019/05/18/closure1#Closure-語法\"></a></h2><h3 id=\"去掉-func-關鍵字-名稱-用大括號括起來-以-in-關鍵字區隔\">(去掉 func 關鍵字, 名稱, 用大括號括起來, 以 in 關鍵字區隔)<a href=\"2019/05/18/closure1#去掉-func-關鍵字-名稱-用大括號括起來-以-in-關鍵字區隔\"></a></h3><p><img src=\"/2019/05/18/closure1/closure.png\" alt class=\"article-img\"></p>\n<figure class=\"highlight swift\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//僅示範, closure 不能單獨寫</span></span><br><span class=\"line\">&#123; (num1: <span class=\"type\">Int</span>, num2: <span class=\"type\">Int</span>) -&gt; <span class=\"type\">Int</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> sum = num1 + num2</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<br>\n## ※Function Type (蠻重要的, 以後會很常遇到)\n### <u>不管是 closure 或 function 都會有自己明確的 function type</u>\n\n<br>\n\n<p><strong>Function Type = (ParameterType) -&gt; ReturnType</strong></p>\n<h3 id=\"e-g\">e.g.<a href=\"2019/05/18/closure1#e-g\"></a></h3><p>Function Type: <strong>(Int, Int) -&gt; Double</strong></p>\n<figure class=\"highlight swift\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">avg</span><span class=\"params\">(num1: Int, num2: Int)</span></span> -&gt; <span class=\"type\">Double</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//... </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<br>\n\n<p>Function Type: <strong>(String) -&gt; Void</strong> or <strong>(String) -&gt; ()</strong></p>\n<figure class=\"highlight swift\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; (name: <span class=\"type\">String</span>) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span> </span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<br>\n\n<h3 id=\"呼叫-Function\">呼叫 Function<a href=\"2019/05/18/closure1#呼叫-Function\"></a></h3><figure class=\"highlight swift\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">sum</span><span class=\"params\">(num1: Int, num2: Int)</span></span> -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> sum = num1 + num2</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">sum(num1: <span class=\"number\">5</span>, num2: <span class=\"number\">10</span>) <span class=\"comment\">// Function 呼叫時, 參數外部名需寫進去</span></span><br></pre></td></tr></table></div></figure>\n\n<br>\n\n<h3 id=\"將-Closure-傳入變數後-像-Function-一樣被呼叫-會省略到外部名\">將 Closure 傳入變數後, 像 Function 一樣被呼叫, 會省略到外部名<a href=\"2019/05/18/closure1#將-Closure-傳入變數後-像-Function-一樣被呼叫-會省略到外部名\"></a></h3><figure class=\"highlight swift\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> sum: (<span class=\"type\">Int</span>, <span class=\"type\">Int</span>) -&gt; <span class=\"type\">Int</span>   <span class=\"comment\">// 宣告一個sum, function type (Int, Int) -&gt; Int</span></span><br><span class=\"line\"></span><br><span class=\"line\">    sum = &#123; (num1: <span class=\"type\">Int</span>, num2: <span class=\"type\">Int</span>) -&gt; <span class=\"type\">Int</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> sum = num1 + num2</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">sum(<span class=\"number\">5</span>, <span class=\"number\">10</span>) <span class=\"comment\">// 將 closure 傳入 sum 變數再呼叫, 省略掉了參數外部名</span></span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"⬇︎-Closure-發揮簡化功力後🙀\">⬇︎ Closure 發揮簡化功力後🙀<a href=\"2019/05/18/closure1#⬇︎-Closure-發揮簡化功力後🙀\"></a></h3><figure class=\"highlight swift\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> sum: (<span class=\"type\">Int</span>, <span class=\"type\">Int</span>) -&gt; <span class=\"type\">Int</span> = &#123; $<span class=\"number\">0</span> + $<span class=\"number\">1</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">sum(<span class=\"number\">5</span>, <span class=\"number\">10</span>) <span class=\"comment\">// 將 closure 傳入 sum 變數再呼叫, 省略掉了參數外部名</span></span><br></pre></td></tr></table></div></figure>\n\n<br>\n\n<hr>\n<h2 id=\"Closure-可以讓語句寫法更簡潔\">Closure 可以讓語句寫法更簡潔<a href=\"2019/05/18/closure1#Closure-可以讓語句寫法更簡潔\"></a></h2><p><strong>1. Inferring parameter and return value types from context</strong></p>\n<p><strong>2. Implicit return from single-expression closures</strong></p>\n<p><strong>3. Shorthand argument names</strong></p>\n<p><strong>4. Trailing closure syntax</strong></p>\n<br>\n\n<h3 id=\"✔︎-以下練習一個例子-有一個數學機器只要傳給他兩個數字以及一個數學公式\">✔︎ 以下練習一個例子, 有一個數學機器只要傳給他兩個數字以及一個數學公式<a href=\"2019/05/18/closure1#✔︎-以下練習一個例子-有一個數學機器只要傳給他兩個數字以及一個數學公式\"></a></h3><h3 id=\"這台數學機器就會把數字配合公式做運算-並印出來\">這台數學機器就會把數字配合公式做運算, 並印出來<a href=\"2019/05/18/closure1#這台數學機器就會把數字配合公式做運算-並印出來\"></a></h3><figure class=\"highlight swift\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// formula 的 function type 是 (Int, Int) -&gt; Int</span></span><br><span class=\"line\"><span class=\"comment\">// 所以傳遞進來的 function 或 closure 型別須符合 (Int, Int) -&gt; Int</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">mathMachine</span><span class=\"params\">(n1: Int, n2: Int, formula: <span class=\"params\">(Int, Int)</span></span></span> -&gt; <span class=\"type\">Int</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(formula(n1, n2))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<br>\n\n<h3 id=\"方法一-用-Function-當參數傳遞\">方法一 : 用 Function 當參數傳遞<a href=\"2019/05/18/closure1#方法一-用-Function-當參數傳遞\"></a></h3><figure class=\"highlight swift\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">sum</span><span class=\"params\">(num1: Int, num2: Int)</span></span> -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num1 + num2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">mathMachine(n1: <span class=\"number\">5</span>, n2: <span class=\"number\">10</span>, formula: sum) <span class=\"comment\">// 15</span></span><br></pre></td></tr></table></div></figure>\n\n<br>\n\n<h3 id=\"方法二-用-Closure-當參數傳遞\">方法二 : 用 Closure 當參數傳遞<a href=\"2019/05/18/closure1#方法二-用-Closure-當參數傳遞\"></a></h3><figure class=\"highlight swift\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mathMachine(n1: <span class=\"number\">5</span>, n2: <span class=\"number\">10</span>, formula: &#123;(num1: <span class=\"type\">Int</span>, num2: <span class=\"type\">Int</span>) -&gt; <span class=\"type\">Int</span> <span class=\"keyword\">in</span> <span class=\"keyword\">return</span> num1 + num2 &#125;) <span class=\"comment\">// 15</span></span><br></pre></td></tr></table></div></figure>\n\n<p><strong>方法二看似跟方法一差不多</strong><br><strong>這時 closure 要發揮神奇的簡化語法了</strong><br><strong>讓我們繼續看下去</strong></p>\n<br>\n\n<h1 id=\"⬇︎\">⬇︎<a href=\"2019/05/18/closure1#⬇︎\"></a></h1><br>\n## <u>1. Inferring parameter and return value types from context</u> \n#### 傳入的 function type 已經確立是 `(Int, Int) -> Int`, 所以傳入 closure 的參數型別和返回值的型別都可以省略了\n\n<figure class=\"highlight swift\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">mathMachine</span><span class=\"params\">(n1: Int, n2: Int, formula: <span class=\"params\">(Int, Int)</span></span></span> -&gt; <span class=\"type\">Int</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(formula(n1, n2))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">mathMachine(n1: <span class=\"number\">5</span>, n2: <span class=\"number\">10</span>, formula: &#123; num1, num2 <span class=\"keyword\">in</span> <span class=\"keyword\">return</span> num1 + num2 &#125;) <span class=\"comment\">// 15</span></span><br></pre></td></tr></table></div></figure>\n\n<br>\n\n<h2 id=\"2-Implicit-return-from-single-expression-closures\"><u>2. Implicit return from single-expression closures</u><a href=\"2019/05/18/closure1#2-Implicit-return-from-single-expression-closures\"></a></h2><h4 id=\"如果只剩下單一敘述句-return-關鍵字也可以省略了\">如果只剩下單一敘述句 <code>return</code> 關鍵字也可以省略了<a href=\"2019/05/18/closure1#如果只剩下單一敘述句-return-關鍵字也可以省略了\"></a></h4><figure class=\"highlight swift\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">mathMachine</span><span class=\"params\">(n1: Int, n2: Int, formula: <span class=\"params\">(Int, Int)</span></span></span> -&gt; <span class=\"type\">Int</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(formula(n1, n2))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">mathMachine(n1: <span class=\"number\">5</span>, n2: <span class=\"number\">10</span>, formula: &#123; num1, num2 <span class=\"keyword\">in</span> num1 + num2 &#125;) <span class=\"comment\">// 15</span></span><br></pre></td></tr></table></div></figure>\n\n<br>\n\n<h2 id=\"3-Shorthand-argument-names\"><u>3. Shorthand argument names</u><a href=\"2019/05/18/closure1#3-Shorthand-argument-names\"></a></h2><h4 id=\"可把參數列省略-用-0-1-替換掉參數-0代表第一個參數-1代表第二個參數-以此類推\">可把參數列省略, 用 <code>$0</code>, <code>$1</code> 替換掉參數, <code>$0</code>代表第一個參數, <code>$1</code>代表第二個參數, 以此類推<a href=\"2019/05/18/closure1#可把參數列省略-用-0-1-替換掉參數-0代表第一個參數-1代表第二個參數-以此類推\"></a></h4><h4 id=\"若使用-shorthand-argument-names-in-關鍵字可以再省略\">若使用 shorthand argument names, <code>in</code> 關鍵字可以再省略<a href=\"2019/05/18/closure1#若使用-shorthand-argument-names-in-關鍵字可以再省略\"></a></h4><figure class=\"highlight swift\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">mathMachine</span><span class=\"params\">(n1: Int, n2: Int, formula: <span class=\"params\">(Int, Int)</span></span></span> -&gt; <span class=\"type\">Int</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(formula(n1, n2))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">mathMachine(n1: <span class=\"number\">5</span>, n2: <span class=\"number\">10</span>, formula: &#123; $<span class=\"number\">0</span> + $<span class=\"number\">1</span> &#125;) <span class=\"comment\">// 15</span></span><br></pre></td></tr></table></div></figure>\n\n<br>\n\n<h2 id=\"4-Trailing-closure-syntax\"><u>4. Trailing closure syntax</u><a href=\"2019/05/18/closure1#4-Trailing-closure-syntax\"></a></h2><h4 id=\"當-Closure-是最後一個參數被傳遞-大括號-Curly-Braces-可移至小括號外面-如果使用-trailing-closure-外部參數名可以再省略\">當 Closure 是最後一個參數被傳遞, 大括號(Curly Braces) 可移至小括號外面, 如果使用  trailing closure, 外部參數名可以再省略<a href=\"2019/05/18/closure1#當-Closure-是最後一個參數被傳遞-大括號-Curly-Braces-可移至小括號外面-如果使用-trailing-closure-外部參數名可以再省略\"></a></h4><figure class=\"highlight swift\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">mathMachine</span><span class=\"params\">(n1: Int, n2: Int, formula: <span class=\"params\">(Int, Int)</span></span></span> -&gt; <span class=\"type\">Int</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(formula(n1, n2))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">mathMachine(n1: <span class=\"number\">5</span>, n2: <span class=\"number\">10</span>) &#123; $<span class=\"number\">0</span> + $<span class=\"number\">1</span> &#125; <span class=\"comment\">// 15</span></span><br></pre></td></tr></table></div></figure>\n\n<br>\n\n<h2 id=\"更精簡寫法-Operator-Methods\"><mark>更精簡寫法 (Operator Methods)</mark><a href=\"2019/05/18/closure1#更精簡寫法-Operator-Methods\"></a></h2><p><strong>當傳入的 closure 有兩個參數且運算子為二元運算子 (+、-、x、÷ …等)</strong><br><strong>使用第1、2、3步驟化簡完, <code>$0</code>, <code>$1</code> 參數可再省略</strong><br><u><strong>如果已經使用 trailing closure 就不適用這一步</strong></u></p>\n<figure class=\"highlight swift\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">mathMachine</span><span class=\"params\">(n1: Int, n2: Int, formula: <span class=\"params\">(Int, Int)</span></span></span> -&gt; <span class=\"type\">Int</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(formula(n1, n2))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">mathMachine(n1: <span class=\"number\">5</span>, n2: <span class=\"number\">10</span>, formula: +) <span class=\"comment\">// 15</span></span><br></pre></td></tr></table></div></figure>\n\n<br>\n<br>\n\n<h3 id=\"下一Part-將使用高階函數來練習-Closure-化簡\">下一Part, 將使用高階函數來練習 Closure 化簡^_^<a href=\"2019/05/18/closure1#下一Part-將使用高階函數來練習-Closure-化簡\"></a></h3>","prev":{"title":"Hello World","link":"2019/09/24/hello-world"},"plink":"http://yoursite.com/2019/05/18/closure1/","toc":[{"title":"Function 跟 Closure 語法上的差別","id":"Function-跟-Closure-語法上的差別","index":"1","children":[{"title":"<mark> Function 語法 </mark>","id":"Function-語法","index":"1.1"},{"title":"<mark>Closure 語法</mark>","id":"Closure-語法","index":"1.2","children":[{"title":"(去掉 func 關鍵字, 名稱, 用大括號括起來, 以 in 關鍵字區隔)","id":"去掉-func-關鍵字-名稱-用大括號括起來-以-in-關鍵字區隔","index":"1.2.1"},{"title":"e.g.","id":"e-g","index":"1.2.2"},{"title":"呼叫 Function","id":"呼叫-Function","index":"1.2.3"},{"title":"將 Closure 傳入變數後, 像 Function 一樣被呼叫, 會省略到外部名","id":"將-Closure-傳入變數後-像-Function-一樣被呼叫-會省略到外部名","index":"1.2.4"},{"title":"⬇︎ Closure 發揮簡化功力後🙀","id":"⬇︎-Closure-發揮簡化功力後🙀","index":"1.2.5"}]},{"title":"Closure 可以讓語句寫法更簡潔","id":"Closure-可以讓語句寫法更簡潔","index":"1.3","children":[{"title":"✔︎ 以下練習一個例子, 有一個數學機器只要傳給他兩個數字以及一個數學公式","id":"✔︎-以下練習一個例子-有一個數學機器只要傳給他兩個數字以及一個數學公式","index":"1.3.1"},{"title":"這台數學機器就會把數字配合公式做運算, 並印出來","id":"這台數學機器就會把數字配合公式做運算-並印出來","index":"1.3.2"},{"title":"方法一 : 用 Function 當參數傳遞","id":"方法一-用-Function-當參數傳遞","index":"1.3.3"},{"title":"方法二 : 用 Closure 當參數傳遞","id":"方法二-用-Closure-當參數傳遞","index":"1.3.4"}]}]},{"title":"⬇︎","id":"⬇︎","index":"2","children":[{"title":"<u>2. Implicit return from single-expression closures</u>","id":"2-Implicit-return-from-single-expression-closures","index":"2.1"},{"title":"<u>3. Shorthand argument names</u>","id":"3-Shorthand-argument-names","index":"2.2"},{"title":"<u>4. Trailing closure syntax</u>","id":"4-Trailing-closure-syntax","index":"2.3"},{"title":"<mark>更精簡寫法 (Operator Methods)</mark>","id":"更精簡寫法-Operator-Methods","index":"2.4","children":[{"title":"下一Part, 將使用高階函數來練習 Closure 化簡^_^","id":"下一Part-將使用高階函數來練習-Closure-化簡","index":"2.4.1"}]}]}]}