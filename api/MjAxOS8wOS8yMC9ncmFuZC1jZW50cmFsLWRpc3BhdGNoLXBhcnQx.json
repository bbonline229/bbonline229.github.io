{"title":"[iOS] Grand Central Dispatch - Part 1","date":"2019-09-20T02:45:24.000Z","link":"2019/09/20/grand-central-dispatch-part1","comments":true,"tags":["iOS"],"updated":"2019-10-07T08:59:56.938Z","content":"<p>主管 : 搞什麼, APP 為什麼進首頁卡住了 ？<br>菜鳥 : 我剛在首頁寫了下載圖片的功能, 過不久圖片就會出現了<br>主管 : 那你有在背景下載嗎 ？ GCD 不是可以把長時間的工作丟到背景執行<br>菜鳥 : 你是說最大公因數(GCD) 嗎？ 我小時候可是數學天才呢<br>主管 : ………………<br>菜鳥 : 我把它丟到背景去下載了, 但為啥圖片下載完了顯示不出來<br>主管 : 圖片下載完, 更新 UI 要在 Main Thread 啦 (눈_눈)<br>菜鳥 : 天阿 ~ 寫 APP 好難 QQ</p>\n<br>\n\n<p>日常開發 iOS APP, 會遇到需要使用 GCD 的時機很多<br>最常應用的場景應該是網路請求吧<br>GCD 對一個初學者來說, 真是個超級大魔王阿<br>這幾篇文章就來簡單介紹一下 GCD 的一些基礎觀念</p>\n<p><strong>- - - - - - - - - - - - - -</strong></p>\n<br>\n\n<h1 id=\"什麼是-GCD\"><u> <strong>什麼是 GCD ?</strong> </u><a href=\"2019/09/20/grand-central-dispatch-part1#什麼是-GCD\"></a></h1><p>簡單來說 GCD 整個精髓就是可以讓我們同一時間能做很多任務 (Task), 我們稱之為 <strong>Concurrency</strong><br>GCD 也讓開發者不用跟底層技術打交道, 例如我們不用知道怎麼操作 Thread<br>當我們提交任務時, Thread pool 去選適當的 Thread</p>\n<p>GCD 是 Apple 提供的一套 Library</p>\n<p><mark> 開發者主要做的事： Create a queue, submit a task </mark></p>\n<h3 id=\"Task\">Task<a href=\"2019/09/20/grand-central-dispatch-part1#Task\"></a></h3><p>要被執行的任務, 例如(下載圖片、Call API)<br>Task 組成可以是 <code>WorkItem</code> 或是 <code>Closure</code></p>\n<li>WorkItem</li>\n\n<figure class=\"highlight swift\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">DispatchWorkItem</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"I'm work item\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<li>Closure</li>\n\n<figure class=\"highlight swift\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"I'm closure\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"Thread\">Thread<a href=\"2019/09/20/grand-central-dispatch-part1#Thread\"></a></h3><p>Task 會在 Thread 被執行<br>而 Thread 是由系統的 Thread Pool 負責管理<br><strong>更新 UI 要在 Main Thread</strong></p>\n<h3 id=\"Queue\">Queue<a href=\"2019/09/20/grand-central-dispatch-part1#Queue\"></a></h3><p>符合 First-in, First-out (<strong>FIFO</strong>), 先進一定先出</p>\n<div align=\"left\"><img src=\"/2019/09/20/grand-central-dispatch-part1/gcd1.jpeg\"></div>\n\n<p>可以聯想成排隊的情況</p>\n<div align=\"left\"><img src=\"/2019/09/20/grand-central-dispatch-part1/gcd2.jpeg\"></div>\n\n<br>\n\n<p><strong>- - - - - - - - - - - - - -</strong></p>\n<br>\n\n<h1 id=\"Dispatch-Queue\"><u> <strong>Dispatch Queue</strong> </u><a href=\"2019/09/20/grand-central-dispatch-part1#Dispatch-Queue\"></a></h1><p>主要用於調度及提交 Task 到 Thread 去執行<br>請把隊列的人當作 Task</p>\n<div align=\"left\"><img src=\"/2019/09/20/grand-central-dispatch-part1/gcd3.jpeg\"></div>\n\n<p>GCD 提供兩種 Dispatch Queue, Serial Queue 及 Concurrent Queue<br>兩種特性不太一樣<mark>, 但兩者共同處是皆符合 <strong>FIFO</strong> 的特性</mark></p>\n<br>\n\n<h3 id=\"Serial-Queue\">Serial Queue<a href=\"2019/09/20/grand-central-dispatch-part1#Serial-Queue\"></a></h3><p>一次只會執行一個 Task, <strong>會等到前一個 Task 執行完才會執行下一個</strong></p>\n<p>因為 Serial 的特性, 確保一次只會執行一個 Task, 所以系統只需要提供一個 Thread 即可</p>\n<div align=\"left\"><img src=\"/2019/09/20/grand-central-dispatch-part1/gcd4.jpeg\"></div>\n\n<figure class=\"highlight swift\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> serialQueue = <span class=\"type\">DispatchQueue</span>(label: <span class=\"string\">\"serial\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">serialQueue.async &#123;</span><br><span class=\"line\">    sleep(<span class=\"number\">3</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"Task 1, Thread: \\(Thread.current)\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">serialQueue.async &#123;</span><br><span class=\"line\">    sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"Task 2, Thread: \\(Thread.current)\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">serialQueue.async &#123;</span><br><span class=\"line\">    sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"Task 3, Thread: \\(Thread.current)\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-------------- Console log --------------</span><br><span class=\"line\">Task 1, Thread: &lt;NSThread: 0x600003369580&gt;&#123;number = 3, name = (null)&#125;</span><br><span class=\"line\">Task 2, Thread: &lt;NSThread: 0x600003369580&gt;&#123;number = 3, name = (null)&#125;</span><br><span class=\"line\">Task 3, Thread: &lt;NSThread: 0x600003369580&gt;&#123;number = 3, name = (null)&#125;</span><br></pre></td></tr></table></div></figure>\n\n<br>\n\n<h3 id=\"Concurrent-Queue\">Concurrent Queue<a href=\"2019/09/20/grand-central-dispatch-part1#Concurrent-Queue\"></a></h3><p>與 Serial Queue 不同處, 第一個 Task 被提交出去<br>第二個 Task 馬上被提交出去, 因為時間差很短<br>所以 Task 看起來會幾乎同時執行<br>需要因應多個 Task, 所以系統會提供多個 Thread</p>\n<div align=\"left\"><img src=\"/2019/09/20/grand-central-dispatch-part1/gcd5.jpeg\"></div>\n\n<figure class=\"highlight swift\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> concurrentQueue = <span class=\"type\">DispatchQueue</span>(label: <span class=\"string\">\"concurrent\"</span>, attributes: .concurrent)</span><br><span class=\"line\"></span><br><span class=\"line\">concurrentQueue.async &#123;</span><br><span class=\"line\">    sleep(<span class=\"number\">3</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"Task 1, Thread: \\(Thread.current)\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">concurrentQueue.async &#123;</span><br><span class=\"line\">    sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"Task 2, Thread: \\(Thread.current)\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">concurrentQueue.async &#123;</span><br><span class=\"line\">    sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"Task 3, Thread: \\(Thread.current)\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-------------- Console log --------------</span><br><span class=\"line\">Task 2, Thread: &lt;NSThread: 0x600002a7d780&gt;&#123;number = 6, name = (null)&#125;</span><br><span class=\"line\">Task 3, Thread: &lt;NSThread: 0x600002a7d940&gt;&#123;number = 7, name = (null)&#125;</span><br><span class=\"line\">Task 1, Thread: &lt;NSThread: 0x600002a72740&gt;&#123;number = 4, name = (null)&#125;</span><br></pre></td></tr></table></div></figure>\n\n<br>\n<br>\n\n<h4 id=\"白話解釋-Serial-Queue-及-Concurrent-Queue-差別\">白話解釋 Serial Queue 及 Concurrent Queue 差別<a href=\"2019/09/20/grand-central-dispatch-part1#白話解釋-Serial-Queue-及-Concurrent-Queue-差別\"></a></h4><p>超商排隊 (Queue), 結帳櫃檯 (Thread)<br>客人結帳 (Task)</p>\n<p><strong>Serial Queue</strong><br>依序排隊後(FIFO), 因為只有一個結帳櫃檯, 所以前一個客人結帳完才換下一位客人</p>\n<p><strong>Concurrent Queue</strong><br>依序排隊後(FIFO), 因為有多個結帳櫃檯, 所以不用等前一個客人結帳完</p>\n<br>\n\n<p><strong>- - - - - - - - - - - - - -</strong></p>\n<br>\n\n<h1 id=\"創建-Dispatch-Queue\"><u> <strong>創建 Dispatch Queue</strong> </u><a href=\"2019/09/20/grand-central-dispatch-part1#創建-Dispatch-Queue\"></a></h1><h3 id=\"系統提供-Dispatch-Queue\">系統提供 Dispatch Queue<a href=\"2019/09/20/grand-central-dispatch-part1#系統提供-Dispatch-Queue\"></a></h3><ul>\n<li>Main Queue (Serial Queue)</li>\n</ul>\n<figure class=\"highlight swift\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">DispatchQueue</span>.main</span><br></pre></td></tr></table></div></figure>\n\n<ul>\n<li>Global Queue (Concurrent Queue)<ul>\n<li>userInteractive</li>\n<li>userInitiated</li>\n<li>utility</li>\n<li>background</li>\n<li>default</li>\n<li>unspecified</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight swift\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">DispatchQueue</span>.global(qos: .userInteractive)</span><br><span class=\"line\"><span class=\"type\">DispatchQueue</span>.global(qos: .userInitiated)</span><br><span class=\"line\"><span class=\"type\">DispatchQueue</span>.global(qos: .utility)</span><br><span class=\"line\"><span class=\"type\">DispatchQueue</span>.global(qos: .background)</span><br><span class=\"line\"><span class=\"type\">DispatchQueue</span>.global(qos: .<span class=\"keyword\">default</span>)</span><br><span class=\"line\"><span class=\"type\">DispatchQueue</span>.global(qos: .unspecified)</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"自訂Dispatch-Queue\">自訂Dispatch Queue<a href=\"2019/09/20/grand-central-dispatch-part1#自訂Dispatch-Queue\"></a></h3><p>預設是 <code>Serial Queue</code></p>\n<figure class=\"highlight swift\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">DispatchQueue</span>(label: <span class=\"string\">\"serial\"</span>)</span><br><span class=\"line\"><span class=\"type\">DispatchQueue</span>(label: <span class=\"string\">\"concurrent\"</span>, attributes: .concurrent)</span><br><span class=\"line\"><span class=\"type\">DispatchQueue</span>(label: <span class=\"string\">\"concurrent\"</span>, qos: .background, attributes: .concurrent)</span><br></pre></td></tr></table></div></figure>\n\n<br>\n\n<p><strong>- - - - - - - - - - - - - -</strong></p>\n<br>\n\n<h1 id=\"Synchronous-amp-Asynchronous\"><u> <strong>Synchronous &amp; Asynchronous</strong> </u><a href=\"2019/09/20/grand-central-dispatch-part1#Synchronous-amp-Asynchronous\"></a></h1><p>Dispatch Queue 提交 Task 的流程<br>除了上面所提到的 Serial Queue 和 Concurrent Queue<br>還需要搭配 Synchronous 或 Asynchronous</p>\n<br>\n\n<li> Sync </li>\n\n<blockquote>\n<p>When a work item is executed synchronously with the sync<br>method, the program waits until execution finishes</p>\n</blockquote>\n<p>阻塞 (block) 當前所在 Thread, 直到 Task 執行完畢, Task 會在當下 Thread 執行<br><strong>如果阻塞到 Main Thread, 會導致 UI 卡住直到 Task 執行完</strong></p>\n<figure class=\"highlight swift\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">DispatchQueue</span>.global().sync &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> num <span class=\"keyword\">in</span> <span class=\"number\">1</span>...<span class=\"number\">5</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"⭕️: \\(num), Thread: \\(Thread.current)\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> num <span class=\"keyword\">in</span> <span class=\"number\">1</span>...<span class=\"number\">5</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"❌: \\(num), Thread: \\(Thread.current)\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-------------- Console log --------------</span><br><span class=\"line\">⭕️: 1, Thread: &lt;NSThread: 0x600001b568c0&gt;&#123;number = 1, name = main&#125;</span><br><span class=\"line\">⭕️: 2, Thread: &lt;NSThread: 0x600001b568c0&gt;&#123;number = 1, name = main&#125;</span><br><span class=\"line\">⭕️: 3, Thread: &lt;NSThread: 0x600001b568c0&gt;&#123;number = 1, name = main&#125;</span><br><span class=\"line\">⭕️: 4, Thread: &lt;NSThread: 0x600001b568c0&gt;&#123;number = 1, name = main&#125;</span><br><span class=\"line\">⭕️: 5, Thread: &lt;NSThread: 0x600001b568c0&gt;&#123;number = 1, name = main&#125;</span><br><span class=\"line\">❌: 1, Thread: &lt;NSThread: 0x600001b568c0&gt;&#123;number = 1, name = main&#125;</span><br><span class=\"line\">❌: 2, Thread: &lt;NSThread: 0x600001b568c0&gt;&#123;number = 1, name = main&#125;</span><br><span class=\"line\">❌: 3, Thread: &lt;NSThread: 0x600001b568c0&gt;&#123;number = 1, name = main&#125;</span><br><span class=\"line\">❌: 4, Thread: &lt;NSThread: 0x600001b568c0&gt;&#123;number = 1, name = main&#125;</span><br><span class=\"line\">❌: 5, Thread: &lt;NSThread: 0x600001b568c0&gt;&#123;number = 1, name = main&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>這時你可以想像, 假使我們下載一首歌要花一分鐘, 用 Sync 會發生什麼事 ？ 🤗</p>\n<br>\n\n<li> Async </li>\n\n<blockquote>\n<p>When a work item is executed asynchronously with the async<br>method, the method call returns immediately</p>\n</blockquote>\n<p>不會阻塞 (block) 當前所在 Thread, 會跳到其他 Thread 執行<br>這也是我們常說的背景執行</p>\n<figure class=\"highlight swift\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">DispatchQueue</span>.global().async &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> num <span class=\"keyword\">in</span> <span class=\"number\">1</span>...<span class=\"number\">5</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"⭕️: \\(num), Thread: \\(Thread.current)\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> num <span class=\"keyword\">in</span> <span class=\"number\">1</span>...<span class=\"number\">5</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"❌: \\(num), Thread: \\(Thread.current)\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-------------- Console log --------------</span><br><span class=\"line\">❌: 1, Thread: &lt;NSThread: 0x60000032e1c0&gt;&#123;number = 1, name = main&#125;</span><br><span class=\"line\">⭕️: 1, Thread: &lt;NSThread: 0x60000033c140&gt;&#123;number = 3, name = (null)&#125;</span><br><span class=\"line\">⭕️: 2, Thread: &lt;NSThread: 0x60000033c140&gt;&#123;number = 3, name = (null)&#125;</span><br><span class=\"line\">❌: 2, Thread: &lt;NSThread: 0x60000032e1c0&gt;&#123;number = 1, name = main&#125;</span><br><span class=\"line\">❌: 3, Thread: &lt;NSThread: 0x60000032e1c0&gt;&#123;number = 1, name = main&#125;</span><br><span class=\"line\">⭕️: 3, Thread: &lt;NSThread: 0x60000033c140&gt;&#123;number = 3, name = (null)&#125;</span><br><span class=\"line\">❌: 4, Thread: &lt;NSThread: 0x60000032e1c0&gt;&#123;number = 1, name = main&#125;</span><br><span class=\"line\">⭕️: 4, Thread: &lt;NSThread: 0x60000033c140&gt;&#123;number = 3, name = (null)&#125;</span><br><span class=\"line\">❌: 5, Thread: &lt;NSThread: 0x60000032e1c0&gt;&#123;number = 1, name = main&#125;</span><br><span class=\"line\">⭕️: 5, Thread: &lt;NSThread: 0x60000033c140&gt;&#123;number = 3, name = (null)&#125;</span><br></pre></td></tr></table></div></figure>\n\n<br>\n<br>\n\n<h4 id=\"白話解釋-Sync-及-Async-差別\">白話解釋 Sync 及 Async 差別<a href=\"2019/09/20/grand-central-dispatch-part1#白話解釋-Sync-及-Async-差別\"></a></h4><p><strong>Sync</strong><br>去 7-11 買咖啡, 店員等咖啡沖好交給你才能幫下一位客人結帳</p>\n<p><strong>Async</strong><br>去 7-11 買咖啡, 店員在等啡啡沖好的這段時機點, 可以幫下一位客人結帳</p>\n<br>\n\n<p><strong>- - - - - - - - - - - - - -</strong></p>\n<br>\n\n\n<h1 id=\"最終組合\"><u> <strong>最終組合</strong> </u><a href=\"2019/09/20/grand-central-dispatch-part1#最終組合\"></a></h1><p>搭配起來會有四種組合, 特性會不太一樣</p>\n<p>Serial Queue - Sync<br>Concurrent Queue - Sync</p>\n<p>Serial Queue - Async    <strong>&lt;- 較常用</strong><br>Concurrent Queue - Async  <strong>&lt;- 較常用</strong></p>\n<p>不管哪種 Dispatch Queue 搭配 Sync, 效果都是差不多的<br>都是會阻塞當下 Thread, 除非有特殊狀況, 不然很少使用</p>\n<p>搭配 Async 是較常用的, 最大優點是不會阻塞 Thread<br>所以也不會有阻塞 Main Thread 造成 UI 卡住的現象</p>\n<br>\n\n<p><strong>- - - - - - - - - - - - - -</strong></p>\n<br>\n\n<h1 id=\"更新-UI\"><u> <strong>更新 UI</strong> </u><a href=\"2019/09/20/grand-central-dispatch-part1#更新-UI\"></a></h1><p><mark><strong>更新 UI, 一定要在 Main Thread</strong></mark><br>所有在 Main Queue 的 Task, 皆會在 Main Thread 被執行</p>\n<figure class=\"highlight swift\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">DispatchQueue</span>.main.async &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Update UI</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<br>\n\n<p><strong>※ 請勿在 Main Queue 使用 Sync, 會造成 DeadLock</strong><br>之後文章會說明為什麼會造成 DeadLock</p>\n<figure class=\"highlight swift\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">DispatchQueue</span>.main.sync &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Cause deadlock</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n","next":{"title":"[iOS] RxSwift 簡易筆記","link":"2019/07/16/rxswift"},"plink":"http://yoursite.com/2019/09/20/grand-central-dispatch-part1/","toc":[{"title":"<u> <strong>什麼是 GCD ?</strong> </u>","id":"什麼是-GCD","index":"1"},{"title":"<u> <strong>Dispatch Queue</strong> </u>","id":"Dispatch-Queue","index":"2"},{"title":"<u> <strong>創建 Dispatch Queue</strong> </u>","id":"創建-Dispatch-Queue","index":"3"},{"title":"<u> <strong>Synchronous &amp; Asynchronous</strong> </u>","id":"Synchronous-amp-Asynchronous","index":"4"},{"title":"<u> <strong>最終組合</strong> </u>","id":"最終組合","index":"5"},{"title":"<u> <strong>更新 UI</strong> </u>","id":"更新-UI","index":"6"}]}